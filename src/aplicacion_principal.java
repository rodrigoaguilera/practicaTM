
import java.awt.Color;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.*;
import java.lang.String;
import java.io.File;

/**
 *
 * @author Rodrigo Aguilera
 * @author Ernest Pastor
 * 
 */
public class aplicacion_principal extends javax.swing.JFrame {

    ArrayList<Imagen> colimage;
    Reproductor player;
    
    boolean DEBUG = false;
    /**
     * Creates new form aplicacion_principal
     */
    public aplicacion_principal() {
        initComponents();
        //inicializar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        playButton = new javax.swing.JButton();
        videoPanel = new javax.swing.JPanel();
        stopButton = new javax.swing.JButton();
        jPanel_Dades = new javax.swing.JPanel();
        jRadioButton_Compression = new javax.swing.JRadioButton();
        jRadioButton_SINcompression = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        menuPrincipal = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        openZipButton = new javax.swing.JMenuItem();
        openPtmButton = new javax.swing.JMenuItem();
        savePtmButton = new javax.swing.JMenuItem();
        closeVideoButton = new javax.swing.JMenuItem();
        closeButton = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuFiltroGris = new javax.swing.JMenuItem();
        Threshold = new javax.swing.JMenuItem();
        InvertirColores = new javax.swing.JMenuItem();
        RGBAdjust50 = new javax.swing.JMenuItem();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tecnologías multimedia");

        playButton.setText("Play");
        playButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout videoPanelLayout = new javax.swing.GroupLayout(videoPanel);
        videoPanel.setLayout(videoPanelLayout);
        videoPanelLayout.setHorizontalGroup(
            videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );
        videoPanelLayout.setVerticalGroup(
            videoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 240, Short.MAX_VALUE)
        );

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        jRadioButton_Compression.setText("CON COMPRESION");
        jRadioButton_Compression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_CompressionActionPerformed(evt);
            }
        });

        jRadioButton_SINcompression.setText("SIN COMPRESION");
        jRadioButton_SINcompression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_SINcompressionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_DadesLayout = new javax.swing.GroupLayout(jPanel_Dades);
        jPanel_Dades.setLayout(jPanel_DadesLayout);
        jPanel_DadesLayout.setHorizontalGroup(
            jPanel_DadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_DadesLayout.createSequentialGroup()
                .addGroup(jPanel_DadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton_Compression)
                    .addComponent(jRadioButton_SINcompression))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel_DadesLayout.setVerticalGroup(
            jPanel_DadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_DadesLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jRadioButton_Compression)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton_SINcompression)
                .addContainerGap(191, Short.MAX_VALUE))
        );

        jLabel1.setText("Datos de Compresión");

        menuArchivo.setText("Archivo");

        openZipButton.setText("Abrir Zip con imagenes");
        openZipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openZipButtonActionPerformed(evt);
            }
        });
        menuArchivo.add(openZipButton);

        openPtmButton.setText("Abrir Vídeo en formato ptm");
        openPtmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPtmButtonActionPerformed(evt);
            }
        });
        menuArchivo.add(openPtmButton);

        savePtmButton.setText("Guardar Vídeo en formato ptm");
        savePtmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePtmButtonActionPerformed(evt);
            }
        });
        menuArchivo.add(savePtmButton);

        closeVideoButton.setText("Cerrar video");
        closeVideoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeVideoButtonActionPerformed(evt);
            }
        });
        menuArchivo.add(closeVideoButton);

        closeButton.setText("Cerrar aplicación");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        menuArchivo.add(closeButton);

        menuPrincipal.add(menuArchivo);

        jMenu2.setText("Editar");

        menuFiltroGris.setText("Aplicar escala de grises");
        menuFiltroGris.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFiltroGrisActionPerformed(evt);
            }
        });
        jMenu2.add(menuFiltroGris);

        Threshold.setText("Threshold");
        Threshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThresholdActionPerformed(evt);
            }
        });
        jMenu2.add(Threshold);

        InvertirColores.setText("Invertir Colores");
        InvertirColores.setAutoscrolls(true);
        InvertirColores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvertirColoresActionPerformed(evt);
            }
        });
        jMenu2.add(InvertirColores);

        RGBAdjust50.setText("RGB Ajuste +50");
        RGBAdjust50.setAutoscrolls(true);
        RGBAdjust50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RGBAdjust50ActionPerformed(evt);
            }
        });
        jMenu2.add(RGBAdjust50);

        menuPrincipal.add(jMenu2);

        setJMenuBar(menuPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(videoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel_Dades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(videoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel_Dades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playButton)
                    .addComponent(stopButton))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playButtonMouseClicked
        if(this.player != null && this.player.isNoStopRequested()){
            this.player.setNoStopRequested(false);
            playButton.setText("Play"); 
        }
        //que haya un video cargado
        else if (colimage != null && colimage.size()>0){
            BufferedImage bi = colimage.get(0).getBi();
            Dimension d = new Dimension(bi.getWidth(),bi.getHeight());
            //si todavia no tenemos reproductor o el que hay no tiene bien la dimension
            if(this.player==null || !this.player.getDim().equals(d)){                
                videoPanel.removeAll();     
                this.player = new Reproductor(d);
            }
            if(this.player.getVideo() == null){
                int i=0;
                BufferedImage[] video = new BufferedImage[colimage.size()];
                Iterator<Imagen> it= colimage.iterator();
                while (it.hasNext()){
                    Imagen ima =it.next();
                    video[i] = ima.getBi();
                    i++;

                }
                this.player.setVideo(video);
                videoPanel.add(this.player);
            }else{                
                this.player.restart();
            }  
            playButton.setText("Pause"); 
        }else{
            JOptionPane.showMessageDialog(rootPane, "No hay ningun video cargado");
        }
    }//GEN-LAST:event_playButtonMouseClicked

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void openZipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openZipButtonActionPerformed
        if(DEBUG){
            this.colimage = Codec.openZip("/home/marinero/imagenes.zip");
        }else{
            JFileChooser fc = new JFileChooser();
            int returnVal;
            returnVal = fc.showOpenDialog(menuArchivo);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                this.colimage = Codec.openZip(fc.getSelectedFile().getAbsolutePath());

            }
       
        }
    }//GEN-LAST:event_openZipButtonActionPerformed

    private void menuFiltroGrisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFiltroGrisActionPerformed
        ArrayList<Imagen>  t_colimage=new ArrayList<>();
        Iterator<Imagen> it= colimage.iterator();
        while (it.hasNext()){            
            Imagen ima =it.next();
            BufferedImage bi = ima.getBi();
            for (int i =0; i<bi.getWidth();i++){
                for(int j=0;j<bi.getHeight();j++){  
                    //System.out.println(ima.getFilename()+" : "+bi.getRGB(i,j));
                    Color cl= new Color(bi.getRGB(i, j));
                    //hacemos la media de los colores
                    int grey = (cl.getRed() + cl.getGreen() + cl.getBlue())/3;
                    cl = new Color(grey,grey,grey);
                    bi.setRGB(i,j,cl.getRGB() );
                    //bi.setRGB(0, 0, 0);
                }
            }
            ima.setBi(bi);
            t_colimage.add(ima);
            
        }
        this.colimage=t_colimage;
    }//GEN-LAST:event_menuFiltroGrisActionPerformed

    private void closeVideoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeVideoButtonActionPerformed
        videoPanel.removeAll();
        colimage=null;
        this.player=null;
        videoPanel.repaint();
        playButton.setText("Play");
    }//GEN-LAST:event_closeVideoButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        videoPanel.removeAll();
        this.player=null;
        videoPanel.repaint();
        playButton.setText("Play");
    }//GEN-LAST:event_stopButtonActionPerformed

    private void savePtmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePtmButtonActionPerformed
        //abrimos el dialogo
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(menuArchivo);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            Codec.savePTM(fc.getSelectedFile().getAbsolutePath(),colimage,true);
            /*
            try {
                int opt = opcio();
                if(opt==1){
                    System.out.println("Guardamos en formato PTM CON compresion");
                    long startTimeC = System.nanoTime();
                    Codec.savePTM(fc.getSelectedFile().getAbsolutePath(),colimage,true);
                    long estimatedTimeC = System.nanoTime() - startTimeC;
                    System.out.println("Tiempo guardando CON compresion: "+estimatedTimeC);
                }
                else{
                    long startTimeD = System.nanoTime();
                    System.out.println("Guardamos en formato PTM SIN compresion");
                    Codec.savePTM(fc.getSelectedFile().getAbsolutePath(),colimage,false);
                    long estimatedTimeD = System.nanoTime() - startTimeD;
                    System.out.println("Tiempo guardando SIN compresion: "+estimatedTimeD);
                }
            } catch (IOException ex) {
                Logger.getLogger(aplicacion_principal.class.getName()).log(Level.SEVERE, null, ex);
            }*/
                              
        } 


    }//GEN-LAST:event_savePtmButtonActionPerformed

    private void openPtmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPtmButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        int returnVal;
        returnVal = fc.showOpenDialog(menuArchivo);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.colimage = Codec.loadPTM(fc.getSelectedFile().getAbsolutePath());
               
            
        }
        
    }//GEN-LAST:event_openPtmButtonActionPerformed

    private void ThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThresholdActionPerformed
        ArrayList<Imagen>  t_colimage=new ArrayList<>();
        Iterator<Imagen> it= colimage.iterator();
        while (it.hasNext()){            
            Imagen ima =it.next();
            BufferedImage bi = ima.getBi();
            for (int i =0; i<bi.getWidth();i++){
                for(int j=0;j<bi.getHeight();j++){  
                    Color cl= new Color(bi.getRGB(i, j));
                    //pasamos el threshold. lo mas bajo lo mandamos a blanco y lo mas alto a negro
                    int barrera = 100;
                    int thres = (cl.getRed() + cl.getGreen() + cl.getBlue())/3;
                    if(thres>=barrera){
                        thres = 255;
                    }
                    else
                        thres = 0;
                    cl = new Color(thres,thres,thres);
                    bi.setRGB(i,j,cl.getRGB() );
                }
            }
            ima.setBi(bi);
            t_colimage.add(ima);
            
        }
        this.colimage=t_colimage;
    }//GEN-LAST:event_ThresholdActionPerformed

    private void InvertirColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvertirColoresActionPerformed
        ArrayList<Imagen>  t_colimage=new ArrayList<>();
        Iterator<Imagen> it= colimage.iterator();
        while (it.hasNext()){            
            Imagen ima =it.next();
            BufferedImage bi = ima.getBi();
            for (int i =0; i<bi.getWidth();i++){
                for(int j=0;j<bi.getHeight();j++){  
                    Color cl= new Color(bi.getRGB(i, j));
                    //invertimos los colores de cada componente
                    int red = 255 - cl.getRed();
                    int green = 255 - cl.getGreen();
                    int blue = 255 - cl.getBlue();
                    cl = new Color(red,green,blue);
                    bi.setRGB(i,j,cl.getRGB() );
                }
            }
            ima.setBi(bi);
            t_colimage.add(ima);
            
        }
        this.colimage=t_colimage;
    }//GEN-LAST:event_InvertirColoresActionPerformed

    private void RGBAdjust50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RGBAdjust50ActionPerformed
        ArrayList<Imagen>  t_colimage=new ArrayList<>();
        Iterator<Imagen> it= colimage.iterator();
        while (it.hasNext()){            
            Imagen ima =it.next();
            BufferedImage bi = ima.getBi();
            for (int i =0; i<bi.getWidth();i++){
                for(int j=0;j<bi.getHeight();j++){  
                    Color cl= new Color(bi.getRGB(i, j));
                    int cpred = cl.getRed();
                    int cpgreen = cl.getGreen();
                    int cpblue = cl.getBlue();
                    //sumamos 50 a cada componente
                    int red = 50 + cl.getRed();
                    int green = 50 + cl.getGreen();
                    int blue = 50 + cl.getBlue();
                    if(red>255){
                        red = cpred;
                    }
                    if(green>255){
                        green = cpgreen;
                    }
                    if(blue>255){
                        blue = cpblue;
                    }
                    cl = new Color(red,green,blue);
                    bi.setRGB(i,j,cl.getRGB() );
                }
            }
            ima.setBi(bi);
            t_colimage.add(ima);
            
        }
        this.colimage=t_colimage;
    }//GEN-LAST:event_RGBAdjust50ActionPerformed

    private void jRadioButton_CompressionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_CompressionActionPerformed
        final JFileChooser fc = new JFileChooser();
        JFrame frame= new JFrame("VIDEO COMPRIMIDO");
        JPanel panel=new JPanel();
        long startTimeC = System.nanoTime();
        Codec.savePTM("ficherotemporal.ptm",colimage,true);
        long estimatedTimeC = System.nanoTime() - startTimeC;
        String temps = String.valueOf(estimatedTimeC);
        File file = new File("ficherotemporal.ptm");
        long tam = file.length();
        JTextArea jt= new JTextArea("Tiempo comprimiendo: "+temps+ ".\nTamaño del archivo: "+tam,5,20);
        frame.add(panel);
        panel.add(jt);
        frame.setSize(300,100);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }//GEN-LAST:event_jRadioButton_CompressionActionPerformed

    private void jRadioButton_SINcompressionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_SINcompressionActionPerformed
        final JFileChooser fc = new JFileChooser();
        JFrame frame= new JFrame("VIDEO SIN COMPRIMIR");
        JPanel panel=new JPanel();
        long startTimeC = System.nanoTime();
        Codec.savePTM("ficherotemporalsin.ptm",colimage,false);
        long estimatedTimeC = System.nanoTime() - startTimeC;
        String temps = String.valueOf(estimatedTimeC);
        File file = new File("ficherotemporalsin.ptm");
        long tam = file.length();
        JTextArea jt= new JTextArea("Tiempo sin comprimir: "+temps+ ".\nTamaño del archivo: "+tam,5,20);
        frame.add(panel);
        panel.add(jt);
        frame.setSize(300,100);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }//GEN-LAST:event_jRadioButton_SINcompressionActionPerformed

    private int opcio() throws IOException{
        BufferedReader lectura = new BufferedReader(new InputStreamReader(System.in));
        String llegir;
        System.out.println("Pulsa 1 para guardar -> CON compresion, Otro numero -> SIN compresion");
        llegir = lectura.readLine();
        int opcio = Integer.parseInt(llegir);
        return opcio;
    }
    
       /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(aplicacion_principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new aplicacion_principal().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem InvertirColores;
    private javax.swing.JMenuItem RGBAdjust50;
    private javax.swing.JMenuItem Threshold;
    private javax.swing.JMenuItem closeButton;
    private javax.swing.JMenuItem closeVideoButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel_Dades;
    private javax.swing.JRadioButton jRadioButton_Compression;
    private javax.swing.JRadioButton jRadioButton_SINcompression;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuItem menuFiltroGris;
    private javax.swing.JMenuBar menuPrincipal;
    private javax.swing.JMenuItem openPtmButton;
    private javax.swing.JMenuItem openZipButton;
    private javax.swing.JButton playButton;
    private javax.swing.JMenuItem savePtmButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JPanel videoPanel;
    // End of variables declaration//GEN-END:variables

//private void inicializar() {   }

 
}

